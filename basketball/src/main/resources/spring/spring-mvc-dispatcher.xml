<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-3.2.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">
  <!--指明 controller 所在包，并扫描其中的注解-->
  <mvc:annotation-driven />
  <context:component-scan base-package="com.controller,com.service"/>

  <mvc:interceptors>
            <!--<mvc:interceptor>
                &lt;!&ndash; 拦截所有URL中包含/user/的请求 &ndash;&gt;
              <mvc:mapping path="/activity/**"/>
                <bean class="com.interceptor.LoginInterceptor"></bean>
            </mvc:interceptor>-->

    <mvc:interceptor>
      <!-- 拦截所有URL中包含/user/的请求 -->
      <mvc:mapping path="/user/**"/>
      <bean class="com.interceptor.UserInterceptor"></bean>
    </mvc:interceptor>
  </mvc:interceptors>
  <!--定时任务-->
  <!--<task:annotation-driven/>
  <context:component-scan base-package="testvice.task"></context:component-scan>
-->
  <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <!-- 制定页面存放的路径 -->
    <property name="prefix" value="/WEB-INF/jsp/"></property>
    <!-- 文件的后缀 -->
    <property name="suffix" value=".jsp"></property>
  </bean>


  <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
  <property name="location" value="classpath:jdbc.properties"/>
</bean>

  <bean id="log" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" >
    <property name="location" value="classpath:log4j.properties"/>
  </bean>


  <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
    <property name="driverClassName" value="${driver}"/>
    <property name="url" value="${url}"/>
    <property name="username" value="${username}"/>
    <property name="password" value="${password}"/>
    <!-- 初始化连接大小 -->
    <property name="initialSize" value="${initialSize}"></property>
    <!-- 连接池最大数量 -->
    <property name="maxActive" value="${maxActive}"></property>
    <!-- 连接池最大空闲 -->
    <property name="maxIdle" value="20"></property>
    <!-- 连接池最小空闲 -->
    <property name="minIdle" value="${minIdle}"></property>
    <!-- 获取连接最大等待时间 -->
    <property name="maxWait" value="${maxWait}"></property>
  </bean>

  <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
  <bean id="SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource"/>
    <!-- 自动扫描mapping.xml文件 -->
    <property name="mapperLocations" value="classpath:mapper/**/*.xml"></property>

  </bean>

  <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="com.dao"/>
    <property name="sqlSessionFactoryBeanName" value="SqlSessionFactory"></property>
  </bean>

  <!-- (事务管理)transaction -->
  <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"/>
  </bean>


<!--redis-->
  <!--<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
    <property name="maxTotal" value="20" />
    <property name="maxIdle" value="${cache.redis.maxIdle}" />
    <property name="maxWaitMillis" value="${cache.redis.maxWait}" />
    <property name="testOnBorrow" value="${cache.redis.testOnBorrow}" />
  </bean>



  <bean id="redisConnectionFactory"
        class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
    <property name="usePool" value="true"></property>
    <property name="hostName" value="${cache.redis.host}" />
    <property name="port" value="${cache.redis.port}" />
    <property name="password" value="${cache.redis.password}" />
    <property name="timeout" value="${cache.redis.timeout}" />
    <property name="database" value="${cache.redis.db}"></property>
    &lt;!&ndash;<constructor-arg index="0" ref="jedisPoolConfig" />&ndash;&gt;
  </bean>

  <bean id="redisCache" class="org.springframework.data.redis.core.RedisTemplate">
    <property name="connectionFactory" ref="redisConnectionFactory" />
    <property name="keySerializer" ref="stringRedisSerializer" />
    <property name="valueSerializer" ref="stringRedisSerializer" />
    <property name="hashKeySerializer" ref="stringRedisSerializer" />
    <property name="hashValueSerializer" ref="stringRedisSerializer" />
  </bean>

  <bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer" />

  <bean id="redisService" class="com.service.RedisService"/>-->
</beans>
